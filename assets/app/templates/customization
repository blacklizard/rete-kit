import { NodeEditor, GetSchemes, ClassicPreset } from "rete";
/* [stack-angular] import { Injector } from '@angular/core' [/stack-angular] */
import { /* [import-area-extensions] AreaExtensions, [/import-area-extensions] */  AreaPlugin } from "rete-area-plugin";
import {
  ConnectionPlugin,
  Presets as ConnectionPresets
} from "rete-connection-plugin";
/* [stack-react] import { ReactRenderPlugin, ReactArea2D, Presets as ReactPresets } from 'rete-react-render-plugin' [/stack-react] */
/* [react18] import { createRoot } from 'react-dom/client' [/react18] */
/* [stack-vue] import { VueRenderPlugin, VueArea2D, Presets as VuePresets } from 'rete-vue-render-plugin/* [vue2] /vue2 [/vue2] */' [/stack-vue] */
/* [stack-angular] import { AngularRenderPlugin, AngularArea2D, Presets as AngularPresets } from 'rete-angular-render-plugin/* [angular12] /12 [/angular12] *//* [angular13] /13 [/angular13] *//* [angular14] /14 [/angular14] *//* [angular15] /15 [/angular15] *//* [angular16] /16 [/angular16] */' [/stack-angular] */
/* [stack-react] import { CustomNode } from "../customization/CustomNode";
import { StyledNode } from "../customization/StyledNode";
import { CustomSocket } from "../customization/CustomSocket";
import { CustomConnection } from "../customization/CustomConnection"; [/stack-react] */
/* [stack-vue] import CustomNode from "../customization/CustomNode.vue";
import CustomConnection from "../customization/CustomConnection.vue";
import CustomSocket from "../customization/CustomSocket.vue"; [/stack-vue] */
/* [stack-angular] import { CustomSocketComponent } from "../customization/custom-socket/custom-socket.component";
import { CustomNodeComponent } from "../customization/custom-node/custom-node.component";
import { CustomConnectionComponent } from "../customization/custom-connection/custom-connection.component"; [/stack-angular] */
import { addCustomBackground } from "../customization/custom-background";



type Schemes = GetSchemes<
  ClassicPreset.Node,
  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>
>;
type AreaExtra =
/* [stack-react] | ReactArea2D<Schemes> [/stack-react] */
/* [stack-vue] | VueArea2D<Schemes> [/stack-vue] */
/* [stack-angular] | AngularArea2D<Schemes> [/stack-angular] */

const socket = new ClassicPreset.Socket("socket");

export async function createEditor(container: HTMLElement/* [stack-angular] , injector: Injector [/stack-angular] */) {
  const editor = new NodeEditor<Schemes>();
  const area = new AreaPlugin<Schemes, AreaExtra>(container);
  const connection = new ConnectionPlugin<Schemes, AreaExtra>();
  /* [stack-react] const reactRender = new ReactRenderPlugin<Schemes, AreaExtra>(/* [react18] { createRoot } [/react18] */) [/stack-react] */
  /* [stack-vue] const vueRender = new VueRenderPlugin<Schemes, AreaExtra>() [/stack-vue] */
  /* [stack-angular] const angularRender = new AngularRenderPlugin<Schemes, AreaExtra>({ injector }) [/stack-angular] */

  /* [selectable] AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {
    accumulating: AreaExtensions.accumulateOnCtrl()
  }); [/selectable] */

  /* [stack-react] reactRender.addPreset(
    ReactPresets.classic.setup({
      area,
      customize: {
        node(context) {
          if (context.payload.label === "Fully customized") {
            return CustomNode;
          }
          if (context.payload.label === "Override styles") {
            return StyledNode;
          }
          return ReactPresets.classic.Node;
        },
        socket(context) {
          return CustomSocket;
        },
        connection(context) {
          return CustomConnection;
        }
      }
    })
  ); [/stack-react] */

  /* [stack-vue] vueRender.addPreset(
    VuePresets.classic.setup({
      area,
      customize: {
        node(context) {
          if (context.payload.label === "Custom") {
            return CustomNode;
          }
          return VuePresets.classic.Node;
        },
        socket(context) {
          return CustomSocket;
        },
        connection(context) {
          return CustomConnection;
        }
      }
    })
  ); [/stack-vue] */

  /* [stack-angular]
  angularRender.addPreset(
    AngularPresets.classic.setup({
      area,
      customize: {
        node() {
          return CustomNodeComponent;
        },
        connection() {
          return CustomConnectionComponent;
        },
        socket() {
          return CustomSocketComponent;
        }
      }
    })
  ); [/stack-angular] */

  connection.addPreset(ConnectionPresets.classic.setup());

  addCustomBackground(area);

  editor.use(area);
  area.use(connection);
  /* [stack-react] area.use(reactRender) [/stack-react] */
  /* [stack-vue] area.use(vueRender) [/stack-vue] */
  /* [stack-angular] area.use(angularRender) [/stack-angular] */

  /* [order-nodes] AreaExtensions.simpleNodesOrder(area); [/order-nodes] */

  /* [stack-react] const aLabel = "Override styles";
  const bLabel = "Fully customized"; [/stack-react] */
  /* [!stack-react] const aLabel = "Custom";
  const bLabel = "Custom"; [/!stack-react] */

  const a = new ClassicPreset.Node(aLabel);
  a.addOutput("a", new ClassicPreset.Output(socket));
  a.addInput("a", new ClassicPreset.Input(socket));
  await editor.addNode(a);

  const b = new ClassicPreset.Node(bLabel);
  b.addOutput("a", new ClassicPreset.Output(socket));
  b.addInput("a", new ClassicPreset.Input(socket));
  await editor.addNode(b);

  await area.translate(a.id, { x: 0, y: 0 });
  await area.translate(b.id, { x: 300, y: 0 });

  await editor.addConnection(new ClassicPreset.Connection(a, "a", b, "a"));

  /* [zoom-at] setTimeout(() => {
    AreaExtensions.zoomAt(area, editor.getNodes());
  }, 300); [/zoom-at] */

  return {
    destroy: () => area.destroy()
  };
}
